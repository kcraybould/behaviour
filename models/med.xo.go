// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"

	"github.com/lib/pq"
)

// Med represents a row from 'public.meds'.
type Med struct {
	MedID      int         `json:"med_id"`      // med_id
	Name       string      `json:"name"`        // name
	StartDate  time.Time   `json:"start_date"`  // start_date
	EndDate    pq.NullTime `json:"end_date"`    // end_date
	Dosage     float32     `json:"dosage"`      // dosage
	DosageType string      `json:"dosage_type"` // dosage_type

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Med exists in the database.
func (m *Med) Exists() bool {
	return m._exists
}

// Deleted provides information if the Med has been deleted from the database.
func (m *Med) Deleted() bool {
	return m._deleted
}

// Insert inserts the Med to the database.
func (m *Med) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.meds (` +
		`name, start_date, end_date, dosage, dosage_type` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) RETURNING med_id`

	// run query
	XOLog(sqlstr, m.Name, m.StartDate, m.EndDate, m.Dosage, m.DosageType)
	err = db.QueryRow(sqlstr, m.Name, m.StartDate, m.EndDate, m.Dosage, m.DosageType).Scan(&m.MedID)
	if err != nil {
		return err
	}

	// set existence
	m._exists = true

	return nil
}

// Update updates the Med in the database.
func (m *Med) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if m._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.meds SET (` +
		`name, start_date, end_date, dosage, dosage_type` +
		`) = ( ` +
		`$1, $2, $3, $4, $5` +
		`) WHERE med_id = $6`

	// run query
	XOLog(sqlstr, m.Name, m.StartDate, m.EndDate, m.Dosage, m.DosageType, m.MedID)
	_, err = db.Exec(sqlstr, m.Name, m.StartDate, m.EndDate, m.Dosage, m.DosageType, m.MedID)
	return err
}

// Save saves the Med to the database.
func (m *Med) Save(db XODB) error {
	if m.Exists() {
		return m.Update(db)
	}

	return m.Insert(db)
}

// Upsert performs an upsert for Med.
//
// NOTE: PostgreSQL 9.5+ only
func (m *Med) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.meds (` +
		`med_id, name, start_date, end_date, dosage, dosage_type` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) ON CONFLICT (med_id) DO UPDATE SET (` +
		`med_id, name, start_date, end_date, dosage, dosage_type` +
		`) = (` +
		`EXCLUDED.med_id, EXCLUDED.name, EXCLUDED.start_date, EXCLUDED.end_date, EXCLUDED.dosage, EXCLUDED.dosage_type` +
		`)`

	// run query
	XOLog(sqlstr, m.MedID, m.Name, m.StartDate, m.EndDate, m.Dosage, m.DosageType)
	_, err = db.Exec(sqlstr, m.MedID, m.Name, m.StartDate, m.EndDate, m.Dosage, m.DosageType)
	if err != nil {
		return err
	}

	// set existence
	m._exists = true

	return nil
}

// Delete deletes the Med from the database.
func (m *Med) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return nil
	}

	// if deleted, bail
	if m._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.meds WHERE med_id = $1`

	// run query
	XOLog(sqlstr, m.MedID)
	_, err = db.Exec(sqlstr, m.MedID)
	if err != nil {
		return err
	}

	// set deleted
	m._deleted = true

	return nil
}

// MedByMedID retrieves a row from 'public.meds' as a Med.
//
// Generated from index 'meds_pkey'.
func MedByMedID(db XODB, medID int) (*Med, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`med_id, name, start_date, end_date, dosage, dosage_type ` +
		`FROM public.meds ` +
		`WHERE med_id = $1`

	// run query
	XOLog(sqlstr, medID)
	m := Med{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, medID).Scan(&m.MedID, &m.Name, &m.StartDate, &m.EndDate, &m.Dosage, &m.DosageType)
	if err != nil {
		return nil, err
	}

	return &m, nil
}

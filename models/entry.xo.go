// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// Entry represents a row from 'public.entry'.
type Entry struct {
	EntryID         int            `json:"entry_id"`         // entry_id
	EntryDate       time.Time      `json:"entry_date"`       // entry_date
	Notes           sql.NullString `json:"notes"`            // notes
	SkippedMedicine bool           `json:"skipped_medicine"` // skipped_medicine
	Grade           string         `json:"grade"`            // grade
	MissedClass     bool           `json:"missed_class"`     // missed_class

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Entry exists in the database.
func (e *Entry) Exists() bool {
	return e._exists
}

// Deleted provides information if the Entry has been deleted from the database.
func (e *Entry) Deleted() bool {
	return e._deleted
}

// Insert inserts the Entry to the database.
func (e *Entry) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if e._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.entry (` +
		`entry_date, notes, skipped_medicine, grade, missed_class` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) RETURNING entry_id`

	// run query
	XOLog(sqlstr, e.EntryDate, e.Notes, e.SkippedMedicine, e.Grade, e.MissedClass)
	err = db.QueryRow(sqlstr, e.EntryDate, e.Notes, e.SkippedMedicine, e.Grade, e.MissedClass).Scan(&e.EntryID)
	if err != nil {
		return err
	}

	// set existence
	e._exists = true

	return nil
}

// Update updates the Entry in the database.
func (e *Entry) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !e._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if e._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.entry SET (` +
		`entry_date, notes, skipped_medicine, grade, missed_class` +
		`) = ( ` +
		`$1, $2, $3, $4, $5` +
		`) WHERE entry_id = $6`

	// run query
	XOLog(sqlstr, e.EntryDate, e.Notes, e.SkippedMedicine, e.Grade, e.MissedClass, e.EntryID)
	_, err = db.Exec(sqlstr, e.EntryDate, e.Notes, e.SkippedMedicine, e.Grade, e.MissedClass, e.EntryID)
	return err
}

// Save saves the Entry to the database.
func (e *Entry) Save(db XODB) error {
	if e.Exists() {
		return e.Update(db)
	}

	return e.Insert(db)
}

// Upsert performs an upsert for Entry.
//
// NOTE: PostgreSQL 9.5+ only
func (e *Entry) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if e._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.entry (` +
		`entry_id, entry_date, notes, skipped_medicine, grade, missed_class` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) ON CONFLICT (entry_id) DO UPDATE SET (` +
		`entry_id, entry_date, notes, skipped_medicine, grade, missed_class` +
		`) = (` +
		`EXCLUDED.entry_id, EXCLUDED.entry_date, EXCLUDED.notes, EXCLUDED.skipped_medicine, EXCLUDED.grade, EXCLUDED.missed_class` +
		`)`

	// run query
	XOLog(sqlstr, e.EntryID, e.EntryDate, e.Notes, e.SkippedMedicine, e.Grade, e.MissedClass)
	_, err = db.Exec(sqlstr, e.EntryID, e.EntryDate, e.Notes, e.SkippedMedicine, e.Grade, e.MissedClass)
	if err != nil {
		return err
	}

	// set existence
	e._exists = true

	return nil
}

// Delete deletes the Entry from the database.
func (e *Entry) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !e._exists {
		return nil
	}

	// if deleted, bail
	if e._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.entry WHERE entry_id = $1`

	// run query
	XOLog(sqlstr, e.EntryID)
	_, err = db.Exec(sqlstr, e.EntryID)
	if err != nil {
		return err
	}

	// set deleted
	e._deleted = true

	return nil
}

// EntryByEntryID retrieves a row from 'public.entry' as a Entry.
//
// Generated from index 'entry_pkey'.
func EntryByEntryID(db XODB, entryID int) (*Entry, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`entry_id, entry_date, notes, skipped_medicine, grade, missed_class ` +
		`FROM public.entry ` +
		`WHERE entry_id = $1`

	// run query
	XOLog(sqlstr, entryID)
	e := Entry{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, entryID).Scan(&e.EntryID, &e.EntryDate, &e.Notes, &e.SkippedMedicine, &e.Grade, &e.MissedClass)
	if err != nil {
		return nil, err
	}

	return &e, nil
}
